What is STL in C++?

STL = Standard Template Library

STL is a powerful library in C++ that provides:
- Containers (like arrays, vectors, maps, sets)
- Algorithms (like sort, binary search, reverse)
- Iterators (to traverse containers)
- Function objects (functors)

It saves time, ensures performance, and avoids writing boilerplate code.

Containers in STL
- Sequence Containers ‚Äì vector, list, deque, array
- Associative Containers ‚Äì set, map, multiset, multimap
- Unordered Containers ‚Äì unordered_set, unordered_map
- Container Adapters ‚Äì stack, queue, priority_queue

What is vector in C++?

A vector is a dynamic array provided by the STL.
It grows automatically when needed (no need to manually manage memory).

Common vector operations:

| Operation         | Code                              |
|------------------|------------------------------------|
| Declaration       | vector<int> v;                    |
| Add element       | v.push_back(10);                  |
| Remove last       | v.pop_back();                     |
| Access            | v[i] or v.at(i)                   |
| Size              | v.size();                         |
| Sort              | sort(v.begin(), v.end());         |
| Iterate           | for (int x : v) cout << x;        |
| Clear all         | v.clear();                        |


------------------------------------------------------------
üìò Vector Problems in C++

-------------------------------------
1Ô∏è‚É£ Two Sum (Using Hash Map)
-------------------------------------

#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

pair<int, int> twoSum(const vector<int>& nums, int target) {
    unordered_map<int, int> mp;
    for (int i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];
        if (mp.count(complement)) {
            return {mp[complement], i};
        }
        mp[nums[i]] = i;
    }
    return {-1, -1};
}

-------------------------------------
2Ô∏è‚É£ Pair Sum (Two Pointer Technique)
-------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool pairSum(vector<int> arr, int target) {
    sort(arr.begin(), arr.end());
    int left = 0, right = arr.size() - 1;
    while (left < right) {
        int sum = arr[left] + arr[right];
        if (sum == target) return true;
        else if (sum < target) left++;
        else right--;
    }
    return false;
}

-------------------------------------
3Ô∏è‚É£ Pair with Given Difference
-------------------------------------

#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

bool hasPairWithDifference(vector<int>& nums, int diff) {
    unordered_set<int> seen;
    for (int num : nums) {
        if (seen.count(num + diff) || seen.count(num - diff)) return true;
        seen.insert(num);
    }
    return false;
}

-------------------------------------
4Ô∏è‚É£ Move All Zeros to End (Stable Order)
-------------------------------------

#include <iostream>
#include <vector>
using namespace std;

void moveZerosToEnd(vector<int>& arr) {
    int index = 0;
    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] != 0) {
            swap(arr[i], arr[index]);
            index++;
        }
    }
}

-------------------------------------
üîÅ Main Function to Run All
-------------------------------------

int main() {
    // Two Sum
    vector<int> nums1 = {2, 7, 11, 15};
    auto res = twoSum(nums1, 9);
    cout << "Two Sum Indices: " << res.first << ", " << res.second << endl;

    // Pair Sum
    vector<int> nums2 = {1, 4, 6, 2, 7};
    cout << "Pair Sum Found: " << (pairSum(nums2, 9) ? "Yes" : "No") << endl;

    // Pair with Difference
    vector<int> nums3 = {5, 20, 3, 2, 5, 80};
    cout << "Pair With Difference: " << (hasPairWithDifference(nums3, 78) ? "Yes" : "No") << endl;

    // Move Zeros
    vector<int> nums4 = {0, 1, 0, 3, 12};
    moveZerosToEnd(nums4);
    cout << "Array after moving zeros: ";
    for (int n : nums4) cout << n << " ";
    cout << endl;

    return 0;
}
