 Split Array into Two Subarrays with Equal Sum
âœ… Problem Statement:
Given an array of integers, determine whether it can be split into two contiguous parts such that the sum of elements in both parts is equal.

âœ… Example:
yaml
Copy
Edit
Input:  [1, 2, 3, 3]
Output: Yes (Split at index 2 â†’ [1, 2, 3] and [3])
ðŸ§  Key Observations:
The array must be split at some index i, where:

prefixSum = sum(arr[0] to arr[i])

suffixSum = sum(arr[i+1] to arr[n-1])

The total sum of the array should be even to have any chance of being split into equal halves.

If we find a point where prefixSum == totalSum / 2, then the array can be split.

âœ… Step-by-Step Approach:
Calculate the total sum of the array.

Initialize prefixSum = 0.

Traverse the array from left to right (excluding the last element).

Keep adding elements to prefixSum.

At every step, check:

If prefixSum == totalSum - prefixSum, then the array can be split.

If such a point is found, return "Yes", otherwise "No".

âœ… Time & Space Complexity:
Time Complexity: O(n)

Space Complexity: O(1) â€” only basic variables used

ðŸ“Œ Example Walkthrough:
makefile
Copy
Edit
arr = [1, 2, 3, 3]
totalSum = 9

Traverse:
  i=0 â†’ prefix=1 â†’ remaining=8 â‰  1
  i=1 â†’ prefix=3 â†’ remaining=6 â‰  3
  i=2 â†’ prefix=6 â†’ remaining=3 â‰  6
â†’ No valid split found
swift
Copy
Edit
arr = [1, 1, 1, 3, 2, 2]
totalSum = 10

Traverse:
  i=0 â†’ prefix=1 â†’ remaining=9
  i=1 â†’ prefix=2 â†’ remaining=8
  i=2 â†’ prefix=3 â†’ remaining=7
  i=3 â†’ prefix=6 â†’ remaining=4
  i=4 â†’ prefix=8 â†’ remaining=2
  i=5 â†’ prefix=10 â†’ remaining=0
â†’ Split found at index 2 â†’ [1, 1, 1] and [3, 2, 2]
âœ… Conclusion:
A prefix sum technique helps solve this efficiently.

No need to generate subarrays or do nested looping.

Ideal for interviews and competitive programming.

